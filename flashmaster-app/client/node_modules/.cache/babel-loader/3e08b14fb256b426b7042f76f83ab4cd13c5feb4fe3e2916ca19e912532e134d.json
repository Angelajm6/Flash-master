{"ast":null,"code":"import React, { useState, useRef, useEffect } from 'react';\nimport FlashCardList from './FlashCardList';\nimport { QUERY_ALL_FLASH } from '../../utils/queries';\nimport { UPDATE_FLASHCARD } from '../../utils/mutations';\nimport { useQuery, useMutation } from '@apollo/client';\n// import './FlashCard/FlashCard.css';\n\n// // import { QUERY_SINGLE_USER } from './utils/queries';\n\nconst {\n  loading,\n  error,\n  data: queryData\n} = useQuery(QUERY_ALL_FLASH);\n\n//   const { loading, error, data: queryData } = useQuery(QUERY_FLASHCARDS);\n\n//   useEffect(() => {\n//     if (queryData) {\n//       setFlashcards(queryData.cards);\n//     }\n//   }, [queryData]);\n\n//   const [addCard, { data }] = useMutation(UPDATE_FLASHCARD);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     addCard({variables: { question: question, answer: answer}});\n//     setQuestion('');\n//     setAnswer('');\n//     setFlashcards({question: setQuestion, answer: setAnswer});\n\n//   };\n\n//   const questionEl = useRef()\n//   const answerEl = useRef()\n\n//   return (\n//     <>\n\n//       <form className=\"createCard\" onSubmit={handleSubmit}>\n//         <div className=\"form-group\">\n//           <label htmlFor=\"question\">Question</label>\n//             <input type=\"text\" \n//             value={question}\n//             id=\"question\" ref={questionEl}\n//             onChange={(e) => setQuestion(e.target.value)} >\n//             </input>\n//           <label htmlFor=\"answer\">Answer</label>\n//           <input type=\"text\"\n//           value={answer}\n//           id=\"answer\" ref={answerEl}>\n//             onChange={(e) => setAnswer(e.target.value)} \n//           </input>\n//         </div>\n//         <div className=\"form-group\">\n//           <button className=\"btn\">Create</button>\n//         </div>\n//       </form>\n//       <div className=\"container\">\n//         {loading && <p>Loading...</p>}\n//         {error && <p>Error :(</p>}\n//         {data && data.Flash.flashCard.map(flashCard => (\n//           <FlashCardList key={Flash.id} flashCard={flashCard} />\n//           ))} \n//           <FlashCardList flashcards={flashcards}/>\n\n//       </div>\n//     </>\n//   );\n// }\n\n// const SAMPLE_FLASHCARDS = [\n//   {\n//     id: 1,\n//     question: \"What's Q1?\",\n//     answer: 'A1'\n//   },\n//   {\n//     id: 2,\n//     question: 'Question 2?',\n//     answer: 'Answer 2'\n//   },\n//   {\n//     id: 3,\n//     question: 'Q3?',\n//     answer: 'Answer 3'\n//   }\n// ];","map":{"version":3,"names":["React","useState","useRef","useEffect","FlashCardList","QUERY_ALL_FLASH","UPDATE_FLASHCARD","useQuery","useMutation","loading","error","data","queryData"],"sources":["/Users/community/Flash-master/flashmaster-app/client/src/components/FlashCard/index.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport FlashCardList from './FlashCardList';\nimport { QUERY_ALL_FLASH } from '../../utils/queries';\nimport { UPDATE_FLASHCARD } from '../../utils/mutations';\nimport { useQuery, useMutation } from '@apollo/client';\n// import './FlashCard/FlashCard.css';\n\n\n// // import { QUERY_SINGLE_USER } from './utils/queries';\n\n\n  const { loading, error, data: queryData } = useQuery(QUERY_ALL_FLASH);\n\n\n//   const { loading, error, data: queryData } = useQuery(QUERY_FLASHCARDS);\n\n\n//   useEffect(() => {\n//     if (queryData) {\n//       setFlashcards(queryData.cards);\n//     }\n//   }, [queryData]);\n\n//   const [addCard, { data }] = useMutation(UPDATE_FLASHCARD);\n\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     addCard({variables: { question: question, answer: answer}});\n//     setQuestion('');\n//     setAnswer('');\n//     setFlashcards({question: setQuestion, answer: setAnswer});\n    \n//   };\n \n//   const questionEl = useRef()\n//   const answerEl = useRef()\n\n \n    \n//   return (\n//     <>\n\n//       <form className=\"createCard\" onSubmit={handleSubmit}>\n//         <div className=\"form-group\">\n//           <label htmlFor=\"question\">Question</label>\n//             <input type=\"text\" \n//             value={question}\n//             id=\"question\" ref={questionEl}\n//             onChange={(e) => setQuestion(e.target.value)} >\n//             </input>\n//           <label htmlFor=\"answer\">Answer</label>\n//           <input type=\"text\"\n//           value={answer}\n//           id=\"answer\" ref={answerEl}>\n//             onChange={(e) => setAnswer(e.target.value)} \n//           </input>\n//         </div>\n//         <div className=\"form-group\">\n//           <button className=\"btn\">Create</button>\n//         </div>\n//       </form>\n//       <div className=\"container\">\n//         {loading && <p>Loading...</p>}\n//         {error && <p>Error :(</p>}\n//         {data && data.Flash.flashCard.map(flashCard => (\n//           <FlashCardList key={Flash.id} flashCard={flashCard} />\n//           ))} \n//           <FlashCardList flashcards={flashcards}/>\n        \n//       </div>\n//     </>\n//   );\n// }\n\n\n// const SAMPLE_FLASHCARDS = [\n//   {\n//     id: 1,\n//     question: \"What's Q1?\",\n//     answer: 'A1'\n//   },\n//   {\n//     id: 2,\n//     question: 'Question 2?',\n//     answer: 'Answer 2'\n//   },\n//   {\n//     id: 3,\n//     question: 'Q3?',\n//     answer: 'Answer 3'\n//   }\n// ];\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,SAASC,eAAe,QAAQ,qBAAqB;AACrD,SAASC,gBAAgB,QAAQ,uBAAuB;AACxD,SAASC,QAAQ,EAAEC,WAAW,QAAQ,gBAAgB;AACtD;;AAGA;;AAGE,MAAM;EAAEC,OAAO;EAAEC,KAAK;EAAEC,IAAI,EAAEC;AAAU,CAAC,GAAGL,QAAQ,CAACF,eAAe,CAAC;;AAGvE;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}